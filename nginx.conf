# Nginx 配置文件 - 文件上传系统
# 适用于 CentOS/RHEL/Ubuntu 等 Linux 发行版

# 全局配置
user root;
worker_processes auto;
error_log /root/nginx/logs/error.log;
pid /root/nginx/logs/nginx.pid;

# 事件配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP配置
http {
    # 基础配置
    include /root/nginx/conf/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /root/nginx/logs/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # 文件上传大小限制 (与Spring Boot配置保持一致)
    client_max_body_size 100M;
    client_body_buffer_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 文件上传系统服务器配置
    server {
        listen 80;
        server_name localhost;  # 替换为你的域名
        
        # 根目录指向nginx html目录
        root /root/nginx/html;
        index index.html upload.html;
        
        # 访问日志
        access_log /root/nginx/logs/fileupload_access.log main;
        error_log /root/nginx/logs/fileupload_error.log;
        
        # 首页重定向
        location = / {
            try_files /index.html =404;
        }
        
        # update目录访问配置 - 必须在API代理之前
        location /update {
            root /root/nginx/html;
            index index.html upload.html;
            try_files $uri $uri/ $uri/index.html =404;
        }
        
        # API请求代理到Spring Boot后端
        location /api/ {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 文件上传相关
            proxy_request_buffering off;
            proxy_buffering off;
            
            # 错误处理
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }
        
        # 健康检查
        location /health {
            proxy_pass http://127.0.0.1:8080/api/health;
            access_log off;
        }
        
        # 静态文件服务 (前端页面) - 排除update目录
        location ~* ^(?!/update/).*\.(html|css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1h;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }
        
        # 错误页面
        location = /50x.html {
            root /root/nginx/html;
        }
        
        # 安全配置
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 禁止访问敏感文件
        location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
            deny all;
        }
    }
    
    # HTTPS配置 (可选，需要SSL证书)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/your/certificate.crt;
    #     ssl_certificate_key /path/to/your/private.key;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # 其他配置与HTTP相同
    #     root /usr/share/nginx/html;
    #     index index.html upload.html;
    #     
    #     location /api/ {
    #         proxy_pass http://127.0.0.1:8080;
    #         # ... 其他代理配置
    #     }
    # }
}

# 流配置 (如果需要TCP/UDP代理)
# stream {
#     upstream backend {
#         server 127.0.0.1:8080;
#     }
#     
#     server {
#         listen 8081;
#         proxy_pass backend;
#     }
# }